'''
This DOCUMENTATION is NOT Generated by AI. Use sca_to_csv funtion to convert sca files to csv files
'''

from matplotlib.pylab import rint
import pandas as pd
import csv
import os
from datetime import datetime, timedelta, timezone
import time

# Input and output file paths
sca_path = r"C:\Users\adith\Downloads\100_hrs_100_open.sca"
csv_path = r'G:\GlitchDetect\data\100_hrs_simulated.csv'

def sca_to_csv(sca_path, csv_path):
    with open(sca_path, 'r') as file:
        lines = file.readlines()

    lines = lines[1:]  # skip version line

    headers = []
    for line in lines:
        if line == '\n':
            break
        headers.append(line.strip().split()[1].strip("'"))

    print(f"Number of headers: {len(headers)}")
    print("Headers:", headers)

    data = []
    i = len(headers) + 1  
    start_time = lines[i].strip()
    print(f"Start time (unix timestamp): {start_time}")
    start_time = int(start_time) 

    while i < len(lines):
        block = []
        while i < len(lines) and lines[i].strip() != '':
            if ' ' not in lines[i]:
                block.append(lines[i].strip().strip('0').strip())
            else:
                block.append(lines[i].strip().split()[1].strip())
            i += 1
        block = block[2:]
        data.append(block)
        i += 1


    with open(csv_path, 'w', newline='') as out_file:
        writer = csv.writer(out_file)
        writer.writerow(headers)
        for item in data:
            writer.writerow(item)

    print(f"CSV file saved at: {csv_path}")


    with open(csv_path, 'r', newline='') as f:
        reader = list(csv.reader(f))
    
    original_headers = reader[0]
    data_rows = reader[1:]
    num_rows = len(data_rows)

    # IST timezone
    IST = timezone(timedelta(hours=5, minutes=30))


    new_headers = ['Seconds', 'Timestamp_IST'] + original_headers


    new_data_rows = []
    for i, row in enumerate(data_rows):
        seconds = i * 5
        utc_dt = datetime.fromtimestamp(start_time + seconds, timezone.utc)
        ist_dt = utc_dt.astimezone(IST)
        timestamp_str = ist_dt.strftime('%Y-%m-%d %H:%M:%S')

        new_row = [seconds, timestamp_str] + row
        new_data_rows.append(new_row)

    # Write final CSV with added columns
    with open(csv_path, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(new_headers)
        writer.writerows(new_data_rows)

    print(f"CSV updated with seconds and IST timestamp columns at: {csv_path}")

sca_to_csv(sca_path, csv_path)
